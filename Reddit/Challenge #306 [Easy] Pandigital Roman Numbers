# https://www.reddit.com/r/dailyprogrammer/comments/5z4f3z/20170313_challenge_306_easy_pandigital_roman/

"""
Description
1474 is a pandigital in Roman numerals (MCDLXXIV). It uses each of the symbols I, V, X, L, C, and M at least once. Your challenge today is to find the small handful of pandigital Roman numbers up to 2000.

Output Description
A list of numbers. Example:

1 (I), 2 (II), 3 (III), 8 (VIII) (Examples only, these are not pandigital Roman numbers)
Challenge Input
Find all numbers that are pandigital in Roman numerals using each of the symbols I, V, X, L, C, D and M exactly once.
"""


import itertools

def pandigital():   
    choices = [[('M', 1000)], [('CD', 400), ('DC', 600)], [('LX', 60), ('XL', 40)], [('IV', 4), ('VI', 6)] ]
    combinations = list(itertools.product(*choices))
    result = []
    
    for idx in combinations:
        numerals = []
        total = 0
        
        for tup in idx:
           numerals.append(tup[0])
           total += tup[1]

        result.append(''.join(numerals) + ': ' + str(total))

    return result 


if __name__ == '__main__':
    print(pandigital())                                                 
    # 1444, 1446, 1464, 1466, 1644, 1646, 1664, 1666


#%%

# choice1 ('CD', 400) or ('DC', 600)
# choice2 ('LX', 60) or ('XL', 40)
# choice3 ('IV', 4) or ('VI', 6)

import itertools

def pandigital():   
    choices = [[1000], [400, 600], [60, 40], [4, 6]]
    return sorted([sum(nums) for nums in list(itertools.product(*choices))])


if __name__ == '__main__':
    print(pandigital())                                                 
    # 1444, 1446, 1464, 1466, 1644, 1646, 1664, 1666


#%%
