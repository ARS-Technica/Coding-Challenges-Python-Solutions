"""
Difference between Highest and Lowest Occurrence
Basic
https://practice.geeksforgeeks.org/problems/difference-between-highest-and-lowest-occurrence4613/1/

Given an array, the task is to find the difference between highest occurrence
and lowest occurrence of any number in an array.
Note: If only one type of element is present in the array return 0.
 

Example 1:

Input: arr[] = [1, 2, 2]
Output: 1
Explanation:
Lowest occurring element (1) occurs once.
Highest occurring element (2) occurs 2 times
 

Example 2:

Input : arr[] = [7, 8, 4, 5, 4, 1, 1, 7, 7, 2, 5]
Output : 2
Explanation:
Lowest occurring element (5) occurs once.
Highest occurring element (1 or 7) occurs 3 times
 

Example 3:

Input : arr[] = [1, 1, 1, 3, 3, 3]
Output : 0
 

Your Task:  
You don't need to read input or print anything. Your task is
to complete the function leftElement() which takes the array arr[]
and its size N as inputs and returns the difference between
highest occurrence and lowest occurrence of any number in the array.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

 
Constraints:
1<=N<=105
1<=A[i]<=105
"""


from collections import Counter

class Solution:
    def findDiff(a, n):
        freq = Counter(a)
        # Most common: print(freq.most_common()[0], freq.most_common()[0][1])
        # Least common: print(freq.most_common()[-1], freq.most_common()[-1][1])
        return (freq.most_common()[0][1] - freq.most_common()[-1][1]) if len(freq) > 1 else 0


if __name__ == "__main__":
    print(Solution.findDiff([1, 2, 2], 3))                                         # 1
    print(Solution.findDiff([7, 8, 4, 5, 4, 1, 1, 7, 7, 2, 5], 11))                # 2
    print(Solution.findDiff([1, 1, 1, 3, 3, 3], 6))                                # 0

