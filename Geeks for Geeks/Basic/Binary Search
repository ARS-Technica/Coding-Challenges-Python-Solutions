"""
Binary Search
Basic
https://practice.geeksforgeeks.org/problems/binary-search-1587115620/1/?page=1&curated[]=1&sortBy=submissions

Given a sorted array of size N and an integer K, find the position at which K is present in the array using binary search.

Example 1:
Input: N = 5
arr[] = {1 2 3 4 5} 
K = 4
Output: 3
Explanation: 4 appears at index 3.

Example 2:
Input: N = 5
arr[] = {11 22 33 44 55} 
K = 445
Output: -1
Explanation: 445 is not present.

Your Task:  
You dont need to read input or print anything. Complete the function binarysearch() which takes arr[], N and K as input parameters and returns the index of K in the array. If K is not present in the array, return -1.


Expected Time Complexity: O(LogN)
Expected Auxiliary Space: O(LogN) if solving recursively and O(1) otherwise.


Constraints:

1 <= N <= 105
1 <= arr[i] <= 106
1 <= K <= 106
"""


class Solution:	
	def binarysearch(self, arr, n, k):
        left = 0
        right = n - 1
        
        while left <= right:
            middle = (left + right) // 2
            
            if k < arr[middle]:
                right = middle - 1
            elif k > arr[middle]:
                left = middle + 1
            else:
                return middle
            
        return -1


if __name__ == "__main__":
    print(Solution.binarysearch([1, 2, 3, 4, 5], 5, 4))                            # 3
    print(Solution.binarysearch([11, 22, 33, 44, 55], 5, 445))                     # -1

