"""
Number following a pattern
Medium
https://practice.geeksforgeeks.org/problems/number-following-a-pattern3126/1/

Given a pattern containing only I's and D's. I for increasing and D for decreasing.
Devise an algorithm to print the minimum number following that pattern.
Digits from 1-9 and digits can't repeat.


Example 1:

Input: D
Output: 21
Explanation:
D is meant for decreasing,
So we choose the minimum number
among 21,31,54,87,etc.


Example 2:

Input: IIDDD
Output: 126543
Explanation:
Above example is self- explanatory,
1 < 2 < 6 > 5 > 4 > 3
  I - I - D - D - D


Your Task:

You don't need to read input or print anything. Your task is to complete the
function printMinNumberForPattern() which takes the string S and returns a
string containing the minimum number following the valid pattern.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)


Constraints:
1 ≤ Length of String ≤ 8
"""

# FAILED because the first character of input corresponds to TWO digits in output.


class Solution:
    def printMinNumberForPattern(S):
        nums = [str(n) for n in range(1, len(S) + 2)]
        direction = [char for char in S]
        result = [nums.pop(0) if char == "I" else nums.pop(-1) for idx, char in enumerate(direction)]     
        return ''.join(result + nums)


if __name__ == "__main__":
    print(Solution.printMinNumberForPattern("D"))           # 21
    print(Solution.printMinNumberForPattern("IIDDD"))       # 126543
    print(Solution.printMinNumberForPattern("DI"))          # 213


#%%

# Also, number of digits in output is one more than number of characters in input.
# Note that the first character of input corresponds to two digits in output.


class Solution:
    def printMinNumberForPattern(S):
        n = len(S)
        nums = [str(n) for n in range(1, len(S) + 2)]
        result = []

        for idx in range(n):
            if S[idx] == "I":
                    result.append(nums.pop(0))
            else:   # if S[char] == "D":
                count = 0
                down = idx

                while down < n and S[down] == "D": 
                    count += 1
                    down += 1

                result.append(nums.pop(0+count))

        result.append(nums.pop(0))
        return int(''.join(result))


if __name__ == "__main__":
    print(Solution.printMinNumberForPattern("D"))           # 21
    print(Solution.printMinNumberForPattern("IIDDD"))       # 126543
    print(Solution.printMinNumberForPattern("DI"))          # 213

