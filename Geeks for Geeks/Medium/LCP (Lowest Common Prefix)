"""
LCP
Medium
https://practice.geeksforgeeks.org/problems/cf0cd86c66d07222499f84ec22dbcf6cae30e848/1/

Note: This POTD is a part of Geek Summer Carnival. Solve all POTD consecutively
from 5th to 10th April and get a chance to win exclusive discount vouchers on our GfG courses.

Geek is at the geek summer carnival. He is given an array of N strings. To
unlock exclusive course discounts he needs to find the longest common prefix
among all strings present in the array. Can you help him ?


Example 1:

Input: N = 4
ar[] = {geeksforgeeks, geeks, geek, geezer}

Output: gee

Explanation: 
Longest common prefix in all the given string is gee. 
 

Example 2:

Input: N = 3
ar[] = {apple, ape, april}

Output: ap

Your Task:
You don't need to read input or print anything. Complete the function LCP()
that takes integer n and ar[] as input parameters and return the LCP (in case
there is no common prefix return -1). 


Expected time complexity: O(NlogN)
Expected space complexity: O(string length)


Constraints:
1 <= N <= 10^3
1 <= String Length <= 100
"""


class Solution:
    def LCP(arr, n):
        count = 0
        shortest = list(min(arr, key=len))

        for word in arr:
            if word[count] == shortest[count]:
                count += 1
            else:
                return ''.join(shortest[0:count])

        return -1
            
            
if __name__ == "__main__":
    print(Solution.LCP(['geeksforgeeks', 'geeks', 'geek', 'geezer'], 4))             # gee
    print(Solution.LCP(['apple', 'ape', 'april'], 3))                                # ap
    print(Solution.LCP(['a', 'b', 'c'], 3))                                          # -1

# Runtime Error 
# Test Cases Passed: 0 /  205


#%%


class Solution:
    def LCP(arr, n):
        arr.sort(key=len) 

        # Edge Cases
        if arr == None or len(arr) == 0:
            return -1
        elif len(arr) == 1:
            return arr[0]
        elif len(arr[0]) == 0:
            return -1
        elif len(arr[0]) == 1:
            if arr[0][0] != arr[1][0]:
                return -1
        else:
            result = ""

            for idx in range(len(arr[0])):
                for word in arr:
                    if idx == len(word) or word[idx] != arr[0][idx]:
                        return result

                result += arr[0][idx]

        return -1


if __name__ == "__main__":
    print(Solution.LCP(['geeksforgeeks', 'geeks', 'geek', 'geezer'], 4))             # gee
    print(Solution.LCP(['apple', 'ape', 'april'], 3))                                # ap
    print(Solution.LCP(['a', 'b', 'c'], 3))                                          # -1
    print(Solution.LCP(['ab', 'cd', 'ef'], 3))                                       # -1    

# Wrong Answer !!!
# Test Cases Passed: 1 / 205


#%%


class Solution:
    def LCP(arr, n):
        arr.sort(key=len) 

        # Edge Cases
        if arr == None or len(arr) == 0:
            return -1
        elif len(arr) == 1:
            return arr[0]
        elif len(arr[0]) == 0:
            return -1
        elif len(arr[0]) == 1:
            if arr[0][0] != arr[1][0]:
                return -1
        else:
            limit = sum([1 for idx in range(len(arr[0])) for word in arr if idx < len(word) and word[idx] == arr[0][idx]])
            return arr[0][0:limit-1]
             
                        

        return -1


if __name__ == "__main__":
    print(Solution.LCP(['geeksforgeeks', 'geeks', 'geek', 'geezer'], 4))             # gee
    print(Solution.LCP(['apple', 'ape', 'april'], 3))                                # ap
    print(Solution.LCP(['a', 'b', 'c'], 3))                                          # -1
    print(Solution.LCP(['ab', 'cd', 'ef'], 3))                                       # -1

# Wrong Answer !!!


#%%


class Solution:
    def LCP(arr, n):
        arr.sort(key=len) 

        # Edge Cases
        if arr == None or len(arr) == 0:
            return -1
        elif len(arr) == 1:
            return arr[0]
        elif len(arr[0]) == 0:
            return -1
        elif len(arr[0]) == 1:
            if arr[0][0] != arr[1][0]:
                return -1

        else:
            for idx in range(len(arr[0])):
                for word in arr:
                    if idx == len(word) or word[idx] != arr[0][idx]:
                        return arr[0][0:idx] if idx > 0 else -1

        return -1


if __name__ == "__main__":
    print(Solution.LCP(['geeksforgeeks', 'geeks', 'geek', 'geezer'], 4))             # gee
    print(Solution.LCP(['apple', 'ape', 'april'], 3))                                # ap
    print(Solution.LCP(['a', 'b', 'c'], 3))                                          # -1
    print(Solution.LCP(['ab', 'cd', 'ef'], 3))                                       # -1
    print(Solution.LCP(['a', 'a', 'a', 'a'], 4))                                     # a   

# Wrong Answer !!!
# Test Cases Passed: 3 / 205


#%%


class Solution:
    def LCP(arr, n):
        arr.sort(key=len) 

        # Edge Cases
        if arr == None or len(arr) == 0: return -1
        elif arr[0] == None or len(arr[0]) == 0: return -1 
        elif len(arr) == 1: return arr[0]
        elif arr[0][0] != arr[1][0]: return -1
        elif len(set(arr[0]).intersection(arr[1])) == 0: return -1


        if len(arr[0]) == 1:
            for word in range(1, len(arr)):
                if arr[word] != arr[0]:
                    return -1
                else:
                    return arr[0]


        for idx in range(len(arr[0])):
            for word in range(1, len(arr[0])):
                if arr[word][idx] != arr[0][idx] or idx == len(arr[0]):
                    return arr[0][0:idx] #if len(arr[0][0:idx]) > 0 else -1

        return -1

            
if __name__ == "__main__":
    print(Solution.LCP(['geeksforgeeks', 'geeks', 'geek', 'geezer'], 4))             # gee
    print(Solution.LCP(['apple', 'ape', 'april'], 3))                                # ap
    print(Solution.LCP(['a', 'b', 'c'], 3))                                          # -1
    print(Solution.LCP(['ab', 'cd', 'ef'], 3))                                       # -1
    print(Solution.LCP(['a', 'a', 'a', 'a'], 4))                                     # a   
    print(Solution.LCP(['abc', 'abcd', 'abcde', 'abcdef'], 4))                       # abc

# Wrong Answer !!!
# Test Cases Passed: 3 / 205


#%%


class Solution:
    def LCP(arr, n):
        arr.sort(key=len) 

        # Edge Cases
        if arr == None or len(arr) == 0: return -1
        elif arr[0] == None or len(arr[0]) == 0: return -1 
        elif len(arr) == 1: return arr[0]

        count = len(arr[0])
        
        while count > 0:
            if all(word.startswith(arr[0][0:count]) for word in arr[1::]):
                return arr[0][0:count]
            else:
                count -= 1
             
        return -1

            
if __name__ == "__main__":
    print(Solution.LCP(['geeksforgeeks', 'geeks', 'geek', 'geezer'], 4))             # gee
    print(Solution.LCP(['apple', 'ape', 'april'], 3))                                # ap
    print(Solution.LCP(['a', 'b', 'c'], 3))                                          # -1
    print(Solution.LCP(['ab', 'cd', 'ef'], 3))                                       # -1
    print(Solution.LCP(['a', 'a', 'a', 'a'], 4))                                     # a   
    print(Solution.LCP(['abc', 'abcd', 'abcde', 'abcdef'], 4))                       # abc

# Passed


#%%


class Solution:
    def LCP(arr,n):
        arr.sort(key=len) 
        shortest = arr[0]
        result = ""

        for idx in range(len(shortest)):
            count = 0

            for word in arr:
                if word[idx] != shortest[idx]:
                    count = 1
            if count == 0:
                result += shortest[idx]

        return result if result else -1


if __name__ == "__main__":
    print(Solution.LCP(['geeksforgeeks', 'geeks', 'geek', 'geezer'], 4))             # gee
    print(Solution.LCP(['apple', 'ape', 'april'], 3))                                # ap
    print(Solution.LCP(['a', 'b', 'c'], 3))                                          # -1
    print(Solution.LCP(['ab', 'cd', 'ef'], 3))                                       # -1
    print(Solution.LCP(['a', 'a', 'a', 'a'], 4))                                     # a   
    print(Solution.LCP(['abc', 'abcd', 'abcde', 'abcdef'], 4))                       # abc    


#%%

# Better solution. Not mine.
# https://practice.geeksforgeeks.org/viewSol.php?subId=c9cd91a416b901143d1b9778fd558813&pid=710278&user=tejas224422


import os

class Solution:
    def LCP(arr,n):
        #code here
        a=os.path.commonprefix(arr)
        if a=='':
            return -1
        return a


if __name__ == "__main__":
    print(Solution.LCP(['geeksforgeeks', 'geeks', 'geek', 'geezer'], 4))             # gee
    print(Solution.LCP(['apple', 'ape', 'april'], 3))                                # ap
    print(Solution.LCP(['a', 'b', 'c'], 3))                                          # -1
    print(Solution.LCP(['ab', 'cd', 'ef'], 3))                                       # -1
    print(Solution.LCP(['a', 'a', 'a', 'a'], 4))                                     # a   
    print(Solution.LCP(['abc', 'abcd', 'abcde', 'abcdef'], 4))                       # abc    


#%%
