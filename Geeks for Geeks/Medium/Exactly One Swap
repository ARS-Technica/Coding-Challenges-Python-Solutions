"""
Exactly one swap
Medium
https://practice.geeksforgeeks.org/problems/2ac2f925b836b0625d848a0539ffd3d2d2995f92/1/ 

Given a string S containing lowercase english alphabet characters. The task is
to calculate the number of distinct strings that can be obtained after performing
exactly one swap.

In one swap,Geek can pick two distinct index i and j (i.e 1 < i < j < |S| ) of
the string, then swap the characters at the position i and j.
"""


import math

class Solution:
    def countStrings(self, S):
        return math.factorial(len(set(S)))


if __name__ == "__main__":
    print(Solution().countStrings("geek"))                                      # 6
    print(Solution().countStrings("ab"))                                        # 1
    print(Solution().countStrings("bdeec"))                                     # 10

# Wrong Answer !!!
# Test Cases Passed: 0 / 11024


#%%

 
import math

class Solution:
    def countStrings(self, S):
        return math.factorial(len(S) - 1)


if __name__ == "__main__":
    print(Solution().countStrings("geek"))                                      # 6
    print(Solution().countStrings("ab"))                                        # 1
    print(Solution().countStrings("bdeec"))                                     # 10

# Wrong Answer. !!! 
# Test Cases Passed: 0 /11024


#%%


import math

class Solution:
    def countStrings(self, S):
        nums = len(set(S))
        result = 0
        
        if nums == 0: return 0
        if nums == 1: return 1
        if nums == 2: return 1
        
        while nums > 0:
            result += nums
            nums -= 1
        
        return result    


if __name__ == "__main__":
    print(Solution().countStrings("geek"))                                      # 6
    print(Solution().countStrings("ab"))                                        # 1
    print(Solution().countStrings("bdeec"))                                     # 10

# Wrong Answer. !!!
# Test Cases Passed: 1 /11024


#%%


class Solution:
    def countStrings(self, S):
        length = len(S)


        if length == 0: return 0
        if length == 1: return 1
        if length == 2: return 1        


        chars = set(list(S))
        combinations = (len(S) * (len(S) - 1)) // 2


        for char in chars:
            n = S.count(char)
            if n > 1:
                subtract = (n * (n - 1)) // 2
                combinations -= subtract


        return combinations if length == len(chars) else combinations + 1


if __name__ == "__main__":
    print(Solution().countStrings("geek"))                                      # 6
    print(Solution().countStrings("ab"))                                        # 1
    print(Solution().countStrings("bdeec"))                                     # 10
    print(Solution().countStrings("dceb"))                                      # 6
    
# Wrong Answer. !!!
# Test Cases Passed: 17 /11024


#%%


class Solution:
    def countStrings(self, S):
        length = len(S)


        if length == 0: return 0
        if length == 1: return 1
        if length == 2: return 1        


        chars = set(list(S))
        combinations = (len(S) * (len(S) - 1)) // 2


        for char in chars:
            n = S.count(char)
            if n > 1:
                subtract = (n * (n - 1)) // 2
                combinations -= subtract


        return combinations if length == len(chars) else combinations + 1


if __name__ == "__main__":
    print(Solution().countStrings("geek"))                                      # 6
    print(Solution().countStrings("ab"))                                        # 1
    print(Solution().countStrings("bdeec"))                                     # 10
    print(Solution().countStrings("dceb"))                                      # 6
    
# Problem Solved Successfully


#%%
