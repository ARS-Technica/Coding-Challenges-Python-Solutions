"""
Swap all odd and even bits
Easy
https://practice.geeksforgeeks.org/problems/swap-all-odd-and-even-bits-1587115621/1

Given an unsigned integer N. The task is to swap all odd bits with even bits.
For example, if the given number is 23 (00010111), it should be converted to 43(00101011).
Here, every even position bit is swapped with an adjacent bit on the right
side(even position bits are highlighted in the binary representation of 23),
and every odd position bit is swapped with an adjacent on the left side.
"""


class Solution:    
    ##Complete this function
    #Function to swap odd and even bits.
    def swapBits(self, n):
        n = bin(n)[2::]
        print(n)
        evens = []
        odds = []

        for idx, digit in enumerate(n):
            if idx & 1 == 0:
                evens.append(digit)
            else:
                odds.append(digit)

        print(evens, odds)
        result = list(zip(*odds, *evens) )
        result = ''.join(result[0])
        print(result)
        return int(result, 2)


if __name__ == "__main__":
    print(Solution().swapBits(n = 23))            # 43
    print(Solution().swapBits(n = 2))             # 1


# Failed. Truncates binary number.


#%%


class Solution:    
    ##Complete this function
    #Function to swap odd and even bits.
    def swapBits(self, n):
        binary = list(bin(n)[2::])
        nearest_byte = ['0'] * (8 - len(binary) % 8)
        new_binary = nearest_byte + binary
        result = []

        for idx in range(1, len(new_binary), 2):
            result.append(new_binary[idx])
            result.append(new_binary[idx - 1])

        return int(''.join(result), 2)


if __name__ == "__main__":
    print(Solution().swapBits(n = 23))            # 43
    print(Solution().swapBits(n = 2))             # 1


# Problem Solved Successfully
# Total Time Taken: 0.8


#%%


class Solution:    
    ##Complete this function
    #Function to swap odd and even bits.
    def swapBits(self, n):
        binary = list(bin(n)[2::]) 
        binary = ['0'] * (8 - len(binary) % 8) + binary
        return int(''.join([binary[idx] + binary[idx - 1] for idx in range(1, len(binary), 2)]), 2)


if __name__ == "__main__":
    print(Solution().swapBits(n = 23))            # 43
    print(Solution().swapBits(n = 2))             # 1


# Problem Solved Successfully
# Total Time Taken: 0.76


#%%
