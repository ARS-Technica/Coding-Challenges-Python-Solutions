"""
Rope Cutting
Easy
https://practice.geeksforgeeks.org/problems/rope-cutting3334/1/
Created on Wed Jun 22 01:53:38 2022

You are given N ropes. A cut operation is performed on ropes such that all of
them are reduced by the length of the smallest rope. Display the number of ropes
left after every cut operation until the length of each rope is zero.


Example 1:

Input : arr[ ] = {5, 1, 1, 2, 3, 5} 
Output : 4 3 2 
Explanation: In the first operation, the 
minimum ropes are 1 So, we reduce length 1 
from all of them after reducing we left with 
4 ropes and we do the same for rest. 


Example 2:

Input : arr[ ] = {5, 1, 6, 9, 8, 11, 2, 2, 6, 5} 
Output :  9 7 5 3 2 1


Your Task:
This is a function problem. The input is already taken care of by the driver 
code. You only need to complete the function RopeCutting() that takes an array 
(arr), sizeOfArray (n), and return the number of ropes that are left after each 
operation with space if no ropes left after one operation, in this case, return 
0. The driver code takes care of the printing.

Expected Time Complexity: O(N*LOG(N)).
Expected Auxiliary Space: O(1).



Constraints:
1 ≤ N ≤ 105
"""


class Solution:
    def RopeCutting(arr, n):
        arr.sort()
        cut = min(arr) 
        result = []

        while len(arr) > 0:
            arr = [i - cut for i in arr if i > 0]  
            result.append(len(arr))
            cut = arr[0] if len(arr) > 0 else 0

        return result[2::2]


if __name__ == "__main__":
    print(Solution.RopeCutting([5, 1, 1, 2, 3, 5], 6))                      # 4 3 2
    print(Solution.RopeCutting([5, 1, 6, 9, 8, 11, 2, 2, 6, 5], 10))        # 9 7 5 3 2 1


# Time Limit Exceeded
# Test Cases Passed: 102 /  200

#%%


# Rather than actually generating the results,
# just count the times the length of the cut changes.

class Solution:
   def RopeCutting(arr, n):
       arr.sort()
       cut = arr[0]
       result = []

       for idx in range(n):
           if arr[idx] != cut:
               cut = arr[idx]
               result += [n-idx]

       return result


if __name__ == "__main__":
    print(Solution.RopeCutting([5, 1, 1, 2, 3, 5], 6))                      # 4 3 2
    print(Solution.RopeCutting([5, 1, 6, 9, 8, 11, 2, 2, 6, 5], 10))        # 9 7 5 3 2 1


# Passed
