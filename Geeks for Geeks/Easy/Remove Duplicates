"""
Remove Duplicates
Easy
https://practice.geeksforgeeks.org/problems/remove-duplicates3034/1 

Given a string without spaces, the task is to remove duplicates from it.

Note: The original order of characters must be kept the same. 
"""


class Solution:
    def removeDups(self, S):
        result = []
        used_characters = set()

        for character in S:
            if character not in used_characters:
                result.append(character)
                used_characters.add(character)

        return "".join(result)


if __name__ == "__main__":
    print(Solution().removeDups(S = "zvvo"))            # "zvo"
    print(Solution().removeDups(S = "gfg"))             # gf


# Problem Solved Successfully
# Total Time Taken: 0.11


#%%


class Solution:
    def removeDups(self, S):
        result = []
        S = [result.append(character) for character in S if character not in result]
        return "".join(result)


if __name__ == "__main__":
    print(Solution().removeDups(S = "zvvo"))            # "zvo"
    print(Solution().removeDups(S = "gfg"))             # gf


# Problem Solved Successfully
# Total Time Taken: 0.61


#%%


class Solution:
    def removeDups(self, S):
        result = [char for idx, char in enumerate(S) if char not in S[:idx]] 
        return "".join(result)


if __name__ == "__main__":
    print(Solution().removeDups(S = "zvvo"))            # "zvo"
    print(Solution().removeDups(S = "gfg"))             # gf


# Time Limit Exceeded


#%%


from collections import OrderedDict


class Solution:
    def removeDups(self, S):
        result = list(OrderedDict.fromkeys(S))
        return "".join(result)


if __name__ == "__main__":
    print(Solution().removeDups(S = "zvvo"))            # "zvo"
    print(Solution().removeDups(S = "gfg"))             # gf


# Problem Solved Successfully
# Total Time Taken: 0.12


#%%
