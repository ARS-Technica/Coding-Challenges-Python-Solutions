'''
Problem 2

This problem was asked by Uber.

Given an array of integers, return a new array such that each element at index 
i of the new array is the product of all the numbers in the original array 
except the one at i.

For example, if our input was [1, 2, 3, 4, 5], the expected output would be 
[120, 60, 40, 30, 24]. If our input was [3, 2, 1], the expected output would be [2, 3, 6].

Follow-up: what if you can't use division?
'''


def productArray(arr):
    res = []
    
    for i in range(len(arr)):
        tally = 1
        for j in arr:
            if arr.index(j) != i:
                # print(arr[i], j)
                tally *= j
    
        res.append(tally)

    return res


if __name__ == '__main__':
    print(productArray([1, 2, 3, 4, 5]))    #[120, 60, 40, 30, 24]
    print(productArray([3, 2, 1]))          #[2, 3, 6]


#%%


# Better solution.  Not mine.
# https://codereview.stackexchange.com/questions/213214/return-array-with-products-of-old-array-except-i

def coding_solution(_arr):
    new_arr = []
    for n in range(len(_arr)):
        v = 1
        for m, x in enumerate(_arr):
            if m != n:
                v *= x 
            else:
                v *= 1
        new_arr.append(v)
    return np.array(new_arr)


#%%


import numpy 

def arrayProduct(arr):
    prod = numpy.prod(arr)

    new_arr = []

    for n in range(len(arr)):
        new_arr.append(int(prod / arr[n]))       
        
    return new_arr


if __name__ == '__main__':
    print(arrayProduct([1, 2, 3, 4, 5]))    #[120, 60, 40, 30, 24]
    print(arrayProduct([3, 2, 1]))          #[2, 3, 6]
